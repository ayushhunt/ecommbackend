version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - postgres
      - mongosetup
    command: >
      sh -c "
        sleep 30 &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        node dist/server.js
      "
    networks:
      - app-network

  postgres:
    image: postgres
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  mongo1:
    image: mongo:6
    container_name: mongo1
    restart: always
    env_file:
      - .env
    command: --replSet rs0 --bind_ip_all
    volumes:
      - mongo1_data:/data/db
    networks:
      - app-network

  mongo2:
    image: mongo:6
    container_name: mongo2
    restart: always
    env_file:
      - .env
    command: --replSet rs0 --bind_ip_all
    volumes:
      - mongo2_data:/data/db
    networks:
      - app-network

  mongo3:
    image: mongo:6
    container_name: mongo3
    restart: always
    env_file:
      - .env
    command: --replSet rs0 --bind_ip_all
    volumes:
      - mongo3_data:/data/db
    networks:
      - app-network

  mongosetup:
    image: mongo:6
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      bash -c "
        sleep 30 &&
        mongosh --host mongo1:27017 -u root -p example --authenticationDatabase admin --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongo1:27017\" },
              { _id: 1, host: \"mongo2:27017\" },
              { _id: 2, host: \"mongo3:27017\" }
            ]
          })
        '
      "
    networks:
      - app-network

volumes:
  pg_data:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  app-network:
    driver: bridge
