version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for databases...';
        while ! nc -z postgres 5432; do sleep 2; done;
        while ! nc -z mongo 27017; do sleep 2; done;
        echo 'Databases are readyâ€”starting application...';
        npx prisma generate;
        npx prisma migrate deploy;
        node dist/server.js
      "
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--eval",
          "db.adminCommand('ping')"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

volumes:
  pg_data:
  mongo_data:
  uploads:


networks:
  app-network:
    driver: bridge