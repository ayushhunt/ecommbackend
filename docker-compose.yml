version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    command: >
      sh -c "
        echo 'Waiting for databases...';
        while ! nc -z postgres 5432; do sleep 2; done;
        echo 'MongoDB replica set is ready‚Äîstarting migrations‚Ä¶';
        npx prisma generate;
        npx prisma migrate deploy;
        node dist/server.js
      "
    networks:
      - app-network

  postgres:
    image: postgres:15
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  mongo:
    image: mongo:6
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: >
      mongod --replSet rs0 \
             --bind_ip_all \
             --keyFile /etc/mongo-keyfile/mongo-keyfile
    volumes:
      - mongo_data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin --eval 'db.runCommand(\"ping\").ok'"]
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 60s

  mongo-init:
    image: mongo:6
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: >
      bash -c "
        echo 'üõ† Initiating MongoDB replica set‚Ä¶';
        mongosh --host mongo \
          -u \"${MONGO_INITDB_ROOT_USERNAME}\" \
          -p \"${MONGO_INITDB_ROOT_PASSWORD}\" \
          --authenticationDatabase admin \
          --eval '
            cfg = {
              _id: \"rs0\",
              members: [{ _id: 0, host: \"mongo:27017\" }]
            };
            printjson(cfg);
            rs.initiate(cfg);
          ';
        echo '‚è≥ Waiting for PRIMARY‚Ä¶';
        while true; do
          STATE=$(mongosh --quiet \
            --host mongo \
            -u \"${MONGO_INITDB_ROOT_USERNAME}\" \
            -p \"${MONGO_INITDB_ROOT_PASSWORD}\" \
            --authenticationDatabase admin \
            --eval 'print(rs.status().myState)' || echo "NR")
          if [ \"${STATE}\" = \"1\" ]; then
            echo \"‚úÖ PRIMARY elected (\${STATE}).\";
            break;
          else
            echo \"‚Ä¶ still in state \${STATE}, retrying in 2s‚Ä¶\";
            sleep 2;
          fi
        done
        echo 'üõ† Replica set is now PRIMARY. Initialization done.';
      "
    env_file:
      - .env
    networks:
      - app-network

volumes:
  pg_data:
  mongo_data:

networks:
  app-network:
    driver: bridge
